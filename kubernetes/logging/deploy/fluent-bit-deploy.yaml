# Copyright 2021 CYBERCRYPT
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: fluentbit
  labels:
    k8s-app: fluent-bit
data:
  fluent-bit.conf : |
    [SERVICE]
        Flush         2
        Log_Level     info
        Daemon        off
        Parsers_File  fluent-bit-parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020

    [INPUT]
        Name              tail
        Tag               encryptonize.encryption-service.*
        Path              /var/log/containers/encryptonize*.log
        Parser            docker
        DB                /var/log/encryptonize.db
        Mem_Buf_Limit     5MB
        Skip_Long_Lines   Off
        Refresh_Interval  10

    [INPUT]
        Name              tail
        Tag               encryptonize.auth-store.*
        Path              /var/log/containers/*sql-auditlog*.log
        Parser            docker
        DB                /var/log/encryptonize.db
        Mem_Buf_Limit     5MB
        Skip_Long_Lines   Off
        Refresh_Interval  10

    [INPUT]
        Name              tail
        Tag               encryptonize.object-store.*
        Path              /var/log/containers/rook-ceph-rgw*opslog*.log
        Parser            docker
        DB                /var/log/encryptonize.db
        Mem_Buf_Limit     5MB
        Skip_Long_Lines   Off
        Refresh_Interval  10
        
    [FILTER]
        Name                kubernetes
        Match               encryptonize.auth-store.*
        Kube_URL            https://kubernetes.default.svc.cluster.local:443
        Kube_Tag_Prefix     encryptonize.auth-store.var.log.containers.
        Merge_Log           On
        Merge_Parser        auth-store
        Keep_Log            Off 

    [FILTER]
        Name                kubernetes
        Match               encryptonize.object-store.*
        Kube_URL            https://kubernetes.default.svc.cluster.local:443
        Kube_Tag_Prefix     encryptonize.object-store.var.log.containers.
        Merge_Log           On
        Merge_Parser        json
        Keep_Log            Off

    [FILTER]
        Name                lua
        Match               encryptonize.object-store.*
        script              requestId-extractor.lua
        call                extract_requestId

    [FILTER]
        Name                kubernetes
        Match               encryptonize.encryption-service.*
        Kube_URL            https://kubernetes.default.svc.cluster.local:443
        Kube_Tag_Prefix     encryptonize.encryption-service.var.log.containers.
        Merge_Log           On
        Merge_Parser        json
        Keep_Log            Off

    [FILTER]
        Name                modify
        Match               encryptonize.object-store.*
        Rename              operation method
        Rename              http_status status
        
    [OUTPUT]
        Name            es
        Match           encryptonize.*
        Host            ${FLUENT_ELASTICSEARCH_HOST}
        Port            ${FLUENT_ELASTICSEARCH_PORT}
        HTTP_User       ${FLUENT_ELASTICSEARCH_USER}
        HTTP_Passwd     ${FLUENT_ELASTICSEARCH_PASSWORD}
        Logstash_Format On
        Retry_Limit     False
        Tls             On
        Tls.ca_path     /etc/certs/

  requestId-extractor.lua : |
    function extract_requestId(tag, timestamp, record)
        new_record = record         
        new_record["requestId"] = record["http_x_headers"][1]["HTTP_REQUEST_ID"]

        return 1, timestamp, new_record
    end
    
  fluent-bit-parsers.conf : |
    [PARSER]
        Name   apache
        Format regex
        Regex  ^(?<host>[^ ]*) [^ ]* (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?$
        Time_Key time
        Time_Format %d/%b/%Y:%H:%M:%S %z

    [PARSER]
        Name   apache2
        Format regex
        Regex  ^(?<host>[^ ]*) [^ ]* (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^ ]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?$
        Time_Key time
        Time_Format %d/%b/%Y:%H:%M:%S %z

    [PARSER]
        Name   apache_error
        Format regex
        Regex  ^\[[^ ]* (?<time>[^\]]*)\] \[(?<level>[^\]]*)\](?: \[pid (?<pid>[^\]]*)\])?( \[client (?<client>[^\]]*)\])? (?<message>.*)$

    [PARSER]
        Name   nginx
        Format regex
        Regex ^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?$
        Time_Key time
        Time_Format %d/%b/%Y:%H:%M:%S %z

    [PARSER]
        Name   json
        Format json
        Time_Key time
        Time_Format %Y-%m-%dT%H:%M:%S %z

    [PARSER]
        Name        docker
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L
        Time_Keep   On
        # Command      |  Decoder | Field | Optional Action
        # =============|==================|=================
        Decode_Field_As   escaped    log

    [PARSER]
        Name        syslog
        Format      regex
        Regex       ^\<(?<pri>[0-9]+)\>(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[a-zA-Z0-9_\/\.\-]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)? *(?<message>.*)$
        Time_Key    time
        Time_Format %b %d %H:%M:%S

    [PARSER]
        name       auth-store
        Format     regex
        Regex      ^[^ ]+ [^ ]+[^\{]+\{(?<method>[^\}]+)\} \"(WITH request_id AS \(SELECT '(?<requestId>[a-zA-Z0-9-]+)')?[^\"]+\" \{[^\}]*\} [^ ]+ [^ ]+ (?<status>[^ ]+)
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluent-bit
  namespace: fluentbit
  labels:
    k8s-app: fluent-bit-logging
    version: v1
    kubernetes.io/cluster-service: "true"
spec:
  selector:
    matchLabels:
      k8s-app: fluent-bit-logging
  template:
    metadata:
      labels:
        k8s-app: fluent-bit-logging
        version: v1
        kubernetes.io/cluster-service: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "2020"
        prometheus.io/path: /api/v1/metrics/prometheus
    spec:
      containers:
      - name: fluent-bit
        image: fluent/fluent-bit:1.8.10@sha256:ac6dfd5612d84c89f2514ebefd5fa05ac8bd5bbd1c265597ab4938622a335647
        imagePullPolicy: Always
        ports:
        - containerPort: 2020
        resources:
          requests:
            cpu: "50m"
            memory: "15Mi"
        env:
        - name: FLUENT_ELASTICSEARCH_HOST
          # Set the hostname for Elasticsearch below
          value: "elasticsearch.example.com"
        - name: FLUENT_ELASTICSEARCH_PORT
          value: "9200"
        - name: FLUENT_ELASTICSEARCH_USER
          value: "elastic"
        - name: FLUENT_ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elasticsearch-config
              key: elastic-password
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc/
        - name: elasticsearch-certs
          mountPath: /etc/certs/tls.crt
          subPath: elastic.crt
          readOnly: true
        - name: elasticsearch-certs
          mountPath: /etc/certs/ca.crt
          subPath: elastic-ca.crt
          readOnly: true
        - name: mnt
          mountPath: /mnt
          readOnly: true
      terminationGracePeriodSeconds: 10
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
      - name: elasticsearch-certs
        secret:
          secretName: elasticsearch-certs
      - name: mnt
        hostPath:
          path: /mnt
      serviceAccountName: fluent-bit
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
