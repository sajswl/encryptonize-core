# Copyright 2021 CYBERCRYPT
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

##### Help message #####
help:  ## Display this help
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make <target> \033[36m\033[0m\n\nTargets:\n"} /^[a-zA-Z0-9_-]+:.*?##/ { printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2 }' $(MAKEFILE_LIST)

SHELL := /bin/bash # To allow source 
deploy_env = ./env/deploy_env
provider_env = ./env/provider_env
test_env = ./env/test_env
templated_files = encryptonize/deploy/config.toml encryptonize/deploy/kustomization.yaml object/deploy/kustomization.yaml object/deploy/nginx.conf logging/bootstrap/kustomization.yaml logging/deploy/kustomization.yaml
template_files = $(templated_files:=.tmpl)
secret_files = encryptonize/bootstrap/config/ca.crt encryptonize/bootstrap/config/client.encryptonize.crt encryptonize/bootstrap/config/client.encryptonize.key encryptonize/bootstrap/config/keys.env auth/bootstrap/config/ca.crt auth/bootstrap/config/client.root.crt auth/bootstrap/config/client.root.key auth/bootstrap/config/cockroach.ca.key auth/bootstrap/config/node.crt auth/bootstrap/config/node.key object/bootstrap/config/object_storage.crt object/bootstrap/config/object_storage.key
credentials = credentials/client.root.crt credentials/object_storage_key credentials/ca.crt credentials/client.root.key credentials/encryptonize.crt credentials/object_storage_id credentials/object_storage.crt

##### Generated files #####
$(templated_files): $(deploy_env) $(template_files)
	source $(deploy_env) && \
	./scripts/apply-config.sh

$(secret_files): $(deploy_env)
	source $(deploy_env) && \
	./scripts/gen-secrets.sh

##### Docker #####
.PHONY: docker-build
docker-build: ## Build the Encryptonize image
	source $(deploy_env) && \
	make -C ../encryption-service docker-build	

.PHONY: docker-push
docker-push: ## Push the Encryptonize docker image to remote registry
	source $(deploy_env) && \
	./scripts/docker-push.sh

##### Deployment #####
.PHONY: bootstrap-auth
bootstrap-auth: $(secret_files) ## bootstrap auth storage cluster
	source $(provider_env) && \
	./scripts/bootstrap-auth.sh

.PHONY: deploy-auth
deploy-auth: ## Deploy auth storage cluster
	source $(provider_env) && \
	./scripts/deploy-auth.sh

.PHONY: bootstrap-object
bootstrap-object: ## bootstrap object storage cluster
	source $(provider_env) && \
	./scripts/bootstrap-object.sh

.PHONY: deploy-object
deploy-object: $(templated_files) ## Deploy object storage cluster
	source $(provider_env) && \
	./scripts/deploy-object.sh

.PHONY: bootstrap-encryptonize
bootstrap-encryptonize: $(secret_files) ## bootstrap encryptonize cluster
	source $(provider_env) && \
	./scripts/bootstrap-encryptonize.sh

.PHONY: deploy-encryptonize
deploy-encryptonize: $(templated_files) ## Deploy encryptonize cluster
	source $(provider_env) && \
	./scripts/deploy-encryptonize.sh

.PHONY: bootstrap-logging
bootstrap-logging: $(templated_files) ## bootstrap log collection
	source $(provider_env) && \
	./scripts/bootstrap-logging.sh

.PHONY: deploy-logging
deploy-logging: $(templated_files) ## Deploy log collection
	source $(provider_env) && \
	./scripts/deploy-logging.sh

##### Test #####
$(credentials): $(provider_env)
	source $(provider_env) && \
	./scripts/get-credentials.sh

.PHONY: cluster-test
cluster-test: $(credentials) ## Run E2E tests on the Encryptonize deployment
	source $(provider_env) && \
	source $(test_env) && \
	./scripts/cluster-test.sh

##### Utility #####
.PHONY: gcp-login
gcp-login: ## Use the configured service account to login to GCP and the Encryptonize cluster
	source $(provider_env) && \
	./scripts/gcp-login.sh

.PHONY: clean 
clean: ## Clean the templated files generated by envsubst 
	rm -f $(templated_files)
	rm -rf credentials
